{
	"info": {
		"_postman_id": "542bf689-0047-433a-92e8-9e40c77bfe03",
		"name": "Booker API by lector",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15497739",
		"_collection_link": "https://bt-js-test20241218.postman.co/workspace/BT-20250129~02081923-30d9-4712-8c6c-b3fd600adcee/collection/15497739-542bf689-0047-433a-92e8-9e40c77bfe03?action=share&source=collection_link&creator=15497739"
	},
	"item": [
		{
			"name": "Create booking",
			"item": [
				{
					"name": "Create more bookings",
					"item": [
						{
							"name": "Booking nr2",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Petras\",\n    \"lastname\" : \"Petraitis\",\n    \"totalprice\" : 54,\n    \"depositpaid\" : false,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-05-23\",\n        \"checkout\" : \"2018-06-01\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Booking nr3",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Ona\",\n    \"lastname\" : \"Onaityte\",\n    \"totalprice\" : 276,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-03\",\n        \"checkout\" : \"2019-05-01\"\n    },\n    \"additionalneeds\" : \"Pet friendly room\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Booking nr4",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Salomeja\",\n    \"lastname\" : \"Neris\",\n    \"totalprice\" : 75,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-03\",\n        \"checkout\" : \"2019-05-01\"\n    },\n    \"additionalneeds\" : \"Quite room\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create new booking - positive",
					"item": [
						{
							"name": "Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code 200', ()=>{\r",
											"    // pm.response.to.have.status(200);\r",
											"    console.log(pm.response)\r",
											"    console.log(pm.response.status)\r",
											"    console.log(pm.response.code)\r",
											"    pm.expect(pm.response.code).eq(200)\r",
											"\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// console.log(pm.response.json())\r",
											"\r",
											"// var json = pm.response.json()\r",
											"// console.log(json)\r",
											"// console.log(json.token)\r",
											"// console.log(pm.response.json().token)\r",
											"\r",
											"pm.collectionVariables.set('tokenCreate', pm.response.json().token);\r",
											"\r",
											"// console.log(pm.collectionVariables.get('tokenCreate'));\r",
											"\r",
											"pm.test('Check response body', ()=>{\r",
											"    const responseBodyJson = pm.response.json();\r",
											"\r",
											"    // pm.expect(responseBodyJson).to.have.property('token');\r",
											"    pm.expect(responseBodyJson.token).to.be.a('string');\r",
											"    pm.expect(responseBodyJson.token).to.not.be.empty;\r",
											"    pm.expect(responseBodyJson.token).to.have.lengthOf.at.least(10);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create booking Jonas Jonaitis 20180103",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set('bookingIdCreate', pm.response.json().bookingid)\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Jonas\",\n    \"lastname\" : \"Jonaitis\",\n    \"totalprice\": 123,\n    \"depositpaid\": true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-03\",\n        \"checkout\" : \"2019-05-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Booking details Jonas Jonaitis 20180103",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/booking/{{bookingIdCreate}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking",
										"{{bookingIdCreate}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Booking Jonas Jonaitis 20180103",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "token={{tokenCreate}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking/{{bookingIdCreate}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking",
										"{{bookingIdCreate}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative tests",
					"item": [
						{
							"name": "Without depositpaid property",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Jonas\",\n    \"lastname\" : \"Jonaitis\",\n    \"totalprice\" : 123,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-03\",\n        \"checkout\" : \"2019-05-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Depositpaid equals null",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Jonas\",\n    \"lastname\" : \"Jonaitis\",\n    \"totalprice\" : 123,\n    \"depositpaid\" : null,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-03\",\n        \"checkout\" : \"2019-05-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Totalprices contains String",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Jonas\",\n    \"lastname\" : \"Jonaitis\",\n    \"totalprice\" : \"123\",\n    \"depositpaid\": true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-03\",\n        \"checkout\" : \"2019-05-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						},
						{
							"name": "Without totalprices property",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstname\" : \"Jonas\",\n    \"lastname\" : \"Jonaitis\",\n    \"depositpaid\": true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-03\",\n        \"checkout\" : \"2019-05-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create new booking 02",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set('token', pm.response.json().token);\r",
													"\r",
													"pm.test('Response status code 200', () => {\r",
													"    pm.response.to.have.status(200)\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function saveAminCredentials() {\r",
													"    const admin_credentials = {\r",
													"        username: \"admin\",\r",
													"        password: \"password123\"\r",
													"    }\r",
													"\r",
													"    pm.collectionVariables.set('adminStr', JSON.stringify(admin_credentials));\r",
													"}\r",
													"\r",
													"saveAminCredentials();\r",
													"\r",
													"pm.request.body.raw = pm.collectionVariables.get('adminStr');\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://restful-booker.herokuapp.com/auth",
											"protocol": "https",
											"host": [
												"restful-booker",
												"herokuapp",
												"com"
											],
											"path": [
												"auth"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create booking with random data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"function saveData() {\r",
													"    pm.collectionVariables.set(\r",
													"        'requestCreateBooking',\r",
													"        pm.request.body.raw\r",
													"    );\r",
													"\r",
													"    pm.collectionVariables.set(\r",
													"        'responseCreateBooking',\r",
													"        JSON.stringify(pm.response.json())\r",
													"    );\r",
													"\r",
													"    pm.collectionVariables.set('bookingIdCreate',pm.response.json().bookingid);\r",
													"}\r",
													"\r",
													"pm.test(\"Successful POST request\", function () {\r",
													"    saveData()\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
													"});\r",
													"\r",
													"pm.test('Response body', () => {\r",
													"    // const jsonData = pm.collectionVariables.get('responseCreateBooking');\r",
													"    // const responseBody = JSON.parse(jsonData);\r",
													"\r",
													"    const jsonData = pm.collectionVariables.get('requestCreateBooking');\r",
													"    const requestBody = JSON.parse(jsonData);\r",
													"\r",
													"    const responseBody = pm.response.json(); \r",
													"\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"    pm.expect(responseBody.bookingid).to.be.a('number');\r",
													"    pm.expect(responseBody.bookingid).to.be.above(0);\r",
													"    pm.expect(responseBody.booking).to.be.an('object');\r",
													"    pm.expect(responseBody.booking.firstname).to.be.a('string').and.to.equal(requestBody.firstname);\r",
													"    pm.expect(responseBody.booking.lastname).to.be.a('string').and.to.equal(requestBody.lastname);\r",
													"    pm.expect(responseBody.booking.totalprice).to.be.a('number').and.to.equal(requestBody.totalprice);\r",
													"    pm.expect(responseBody.booking.depositpaid).to.be.equal(requestBody.depositpaid);\r",
													"    pm.expect(responseBody.booking.bookingdates).to.be.an('object');\r",
													"    pm.expect(responseBody.booking.bookingdates.checkin).to.be.a('string').and.to.equal(requestBody.bookingdates.checkin);\r",
													"    pm.expect(responseBody.booking.bookingdates.checkout).to.be.a('string').and.to.equal(requestBody.bookingdates.checkout);\r",
													"    pm.expect(responseBody.booking.additionalneeds).to.be.a('string').and.to.equal(requestBody.additionalneeds);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstname\" : \"Jonas\",\n    \"lastname\" : \"Jonaitis\",\n    \"totalprice\": 123,\n    \"depositpaid\": true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-03\",\n        \"checkout\" : \"2019-05-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/booking",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"booking"
											]
										}
									},
									"response": []
								},
								{
									"name": "Booking details Jonas Jonaitis 20180103 Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Response body', () => {\r",
													"    const jsonData = pm.collectionVariables.get('responseCreateBooking');\r",
													"    const expectedResponseBody = JSON.parse(jsonData);\r",
													"\r",
													"    const responseBody = pm.response.json();\r",
													"    console.log(expectedResponseBody)\r",
													"\r",
													"    pm.expect(responseBody).to.be.an('object');\r",
													"    pm.expect(responseBody.firstname).to.be.a('string').and.to.equal(expectedResponseBody.booking.firstname);\r",
													"    pm.expect(responseBody.lastname).to.be.a('string').and.to.equal(expectedResponseBody.booking.lastname);\r",
													"    pm.expect(responseBody.totalprice).to.be.a('number').and.to.equal(expectedResponseBody.booking.totalprice);\r",
													"    pm.expect(responseBody.depositpaid).to.equal(expectedResponseBody.booking.depositpaid);\r",
													"    pm.expect(responseBody.bookingdates).to.be.an('object');\r",
													"\r",
													"    pm.expect(responseBody.bookingdates.checkin).to.be.a('string').and\r",
													"        .to.equal(expectedResponseBody.booking.bookingdates.checkin);\r",
													"\r",
													"    pm.expect(responseBody.bookingdates.checkout).to.be.a('string').and\r",
													"        .to.equal(expectedResponseBody.booking.bookingdates.checkout);\r",
													"\r",
													"    pm.expect(responseBody.additionalneeds).to.be.a('string').and\r",
													"        .to.equal(expectedResponseBody.booking.additionalneeds);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/booking/{{bookingIdCreate}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"booking",
												"{{bookingIdCreate}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Negative",
							"item": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Create new booking 03",
					"item": [
						{
							"name": "Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set('token', pm.response.json().token);\r",
											"\r",
											"pm.test('Response status code 200', () => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function saveAminCredentials() {\r",
											"    const admin_credentials = {\r",
											"        username: \"admin\",\r",
											"        password: \"password123\"\r",
											"    }\r",
											"\r",
											"    pm.collectionVariables.set('adminStr', JSON.stringify(admin_credentials));\r",
											"}\r",
											"\r",
											"saveAminCredentials();\r",
											"\r",
											"pm.request.body.raw = pm.collectionVariables.get('adminStr');\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create booking with random data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"pm.test('Response body', () => {\r",
											"    const jsonData = pm.collectionVariables.get('bookingInsertData');\r",
											"    const requestBody = JSON.parse(jsonData);\r",
											"\r",
											"    const responseBody = pm.response.json(); \r",
											"\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"    pm.expect(responseBody.bookingid).to.be.a('number');\r",
											"    pm.expect(responseBody.bookingid).to.be.above(0);\r",
											"    pm.expect(responseBody.booking).to.be.an('object');\r",
											"    pm.expect(responseBody.booking.firstname).to.be.a('string').and.to.equal(requestBody.firstname);\r",
											"    pm.expect(responseBody.booking.lastname).to.be.a('string').and.to.equal(requestBody.lastname);\r",
											"    pm.expect(responseBody.booking.totalprice).to.be.a('number').and.to.equal(requestBody.totalprice);\r",
											"    pm.expect(responseBody.booking.depositpaid).to.be.equal(requestBody.depositpaid);\r",
											"    pm.expect(responseBody.booking.bookingdates).to.be.an('object');\r",
											"    pm.expect(responseBody.booking.bookingdates.checkin).to.be.a('string').and.to.equal(requestBody.bookingdates.checkin);\r",
											"    pm.expect(responseBody.booking.bookingdates.checkout).to.be.a('string').and.to.equal(requestBody.bookingdates.checkout);\r",
											"    pm.expect(responseBody.booking.additionalneeds).to.be.a('string').and.to.equal(requestBody.additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const firstNames = [\r",
											"    \"Alice\", \"Bob\", \"Charlie\", \"Diana\", \"Ethan\",\r",
											"    \"Fiona\", \"George\", \"Hannah\", \"Ian\", \"Jasmine\",\r",
											"    \"Kevin\", \"Laura\", \"Michael\", \"Nina\", \"Oscar\",\r",
											"    \"Paula\", \"Quentin\", \"Rachel\", \"Steven\", \"Tina\"\r",
											"];\r",
											"\r",
											"const lastNames = [\r",
											"    \"Anderson\", \"Bennett\", \"Clark\", \"Dawson\", \"Evans\",\r",
											"    \"Foster\", \"Garcia\", \"Hughes\", \"Irwin\", \"Johnson\",\r",
											"    \"Klein\", \"Lopez\", \"Morris\", \"Nguyen\", \"Owens\",\r",
											"    \"Parker\", \"Quinn\", \"Robinson\", \"Smith\", \"Taylor\"\r",
											"];\r",
											"\r",
											"const additionalNeedsOptions = [\"Breakfast\", \"Late checkout\", \"Early check-in\", \"Airport pickup\", \"Parking included\", \"Baby crib\", \"Extra pillows\", \"Room service\", \"Vegetarian meals\", \"High chair\", \"Luggage storage\", \"Quiet room\", \"King-size bed\", \"City view\", \"Ground floor room\", \"Daily housekeeping\", \"Spa access\", \"Wheelchair access\", \"Child seat\", \"Mini fridge\"];\r",
											"\r",
											"\r",
											"function getRandomItem(array) {\r",
											"    return array[Math.floor(Math.random() * array.length)];\r",
											"}\r",
											"\r",
											"function getRandomNumber(min, max) {\r",
											"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
											"}\r",
											"\r",
											"function getRandomBoolean() {\r",
											"    return Math.random() < 0.5;\r",
											"}\r",
											"\r",
											"function generateRequestBody() {\r",
											"    const checkInYear = getRandomNumber(2020, 2025);\r",
											"    const checkInMonth = getRandomNumber(1, 12);\r",
											"    const checkInDay = getRandomNumber(1, 28);\r",
											"    const checkInDate = new Date(checkInYear, checkInMonth - 1, checkInDay);\r",
											"\r",
											"    const checkOutDate = new Date(checkInDate);\r",
											"    checkOutDate.setDate(checkInDate.getDate() + 10); //check in days\r",
											"\r",
											"    const checkInFullDate = checkInDate.toISOString().split('T')[0];\r",
											"    const checkOutFullDate = checkOutDate.toISOString().split('T')[0];\r",
											"\r",
											"    return {\r",
											"        \"firstname\": getRandomItem(firstNames),\r",
											"        \"lastname\": getRandomItem(lastNames),\r",
											"        \"totalprice\": getRandomNumber(1, 1000),\r",
											"        \"depositpaid\": getRandomBoolean(),\r",
											"        \"bookingdates\": {\r",
											"            \"checkin\": checkInFullDate,\r",
											"            \"checkout\": checkOutFullDate\r",
											"        },\r",
											"        \"additionalneeds\": getRandomItem(additionalNeedsOptions)\r",
											"    }\r",
											"}\r",
											"\r",
											"// pm.request.body.raw = JSON.stringify(generateRequestBody());\r",
											"\r",
											"pm.request.body = {\r",
											"    mode: \"raw\",\r",
											"    raw: JSON.stringify(generateRequestBody())\r",
											"}\r",
											"\r",
											"pm.request.headers.add({\r",
											"    key: \"Content-Type\",\r",
											"    value: \"application/json\"\r",
											"})\r",
											"\r",
											"pm.collectionVariables.set('bookingInsertData', pm.request.body.raw)\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"console.log(\"CREATE BOOKING 03: PRE-REQUEST\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"console.log(\"CREATE BOOKING 03: POST-RESPONSE\")"
								]
							}
						}
					]
				},
				{
					"name": "Create new booking 04",
					"item": [
						{
							"name": "Create booking with random data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set('bookingInsertData', pm.request.body.raw)\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
											"});\r",
											"\r",
											"pm.test('Response body', () => {\r",
											"    const jsonData = pm.collectionVariables.get('bookingInsertData');\r",
											"    const requestBody = JSON.parse(jsonData);\r",
											"\r",
											"    const responseBody = pm.response.json(); \r",
											"\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"    pm.expect(responseBody.bookingid).to.be.a('number');\r",
											"    pm.expect(responseBody.bookingid).to.be.above(0);\r",
											"    pm.expect(responseBody.booking).to.be.an('object');\r",
											"    pm.expect(responseBody.booking.firstname).to.be.a('string').and.to.equal(requestBody.firstname);\r",
											"    pm.expect(responseBody.booking.lastname).to.be.a('string').and.to.equal(requestBody.lastname);\r",
											"    pm.expect(responseBody.booking.totalprice).to.be.a('number').and.to.equal(requestBody.totalprice);\r",
											"    pm.expect(responseBody.booking.depositpaid).to.be.equal(requestBody.depositpaid);\r",
											"    pm.expect(responseBody.booking.bookingdates).to.be.an('object');\r",
											"\r",
											"    pm.expect(responseBody.booking.bookingdates.checkin).to.be.a('string').and.to.equal(requestBody.bookingdates.checkin.slice(0, 10));\r",
											"    \r",
											"    pm.expect(responseBody.booking.bookingdates.checkout).to.be.a('string').and.to.equal(requestBody.bookingdates.checkout);\r",
											"\r",
											"    // pm.expect(responseBody.booking.additionalneeds, \"Property additionalneeds\").to.be.a('string').and.to.equal(requestBody.additionalneeds);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"{{$randomFirstName}}\",\r\n    \"lastname\" : \"{{$randomLastName}}\",\r\n    \"totalprice\" : {{$randomInt}},\r\n    \"depositpaid\" : {{$randomBoolean}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{$isoTimestamp}}\",\r\n        \"checkout\" : \"2018-06-01\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/booking",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"console.log(\"CREATE BOOKING MAIN: PRE-REQUEST\")\r",
							"\r",
							"function saveData(){\r",
							"    const userDtls = {\r",
							"            username: \"admin\",\r",
							"            password: \"password123\"\r",
							"        }\r",
							"\r",
							"    pm.collectionVariables.set(\"usrDtls\", JSON.stringify(userDtls));\r",
							"}\r",
							"\r",
							"saveData();\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"console.log(\"CREATE BOOKING MAIN: POST-RESPONSE\")\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Get Bookings",
			"item": [
				{
					"name": "All bookings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response body\", function () {\r",
									"    const responseBodyJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBodyJson).to.be.an(\"array\")\r",
									"    pm.expect(responseBodyJson.length).to.above(0)\r",
									"    // pm.expect(responseBodyJson[0]).to.an(\"object\")\r",
									"    pm.expect(responseBodyJson[0].bookingid).to.an(\"number\")\r",
									"    // pm.expect(responseBodyJson[0].bookingid).is.not.empty\r",
									"    pm.expect(responseBodyJson[0].bookingid).above(0)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 800ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authenticate",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code 200', ()=>{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('token', pm.response.json().token);\r",
											"\r",
											"console.log(pm.request.body)\r",
											"console.log(pm.request.body.raw)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"userCredentials\", JSON.stringify({\r",
											"    username: \"admin\",\r",
											"    password: \"password123\"\r",
											"}));\r",
											"\r",
											"// it works when raw in body is selected\r",
											"\r",
											"pm.request.body.raw =  JSON.stringify({\r",
											"    username: \"admin\",\r",
											"    password: \"password123\"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Auth empty username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2800ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
											"});\r",
											"\r",
											"pm.test('Response body', ()=>{\r",
											"    const responseBody = pm.response.json();\r",
											"\r",
											"    pm.expect(responseBody.reason).to.be.a(\"string\").and.to.eql(\"Bad credentials\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\" : \"\",\n    \"password\" : \"password123\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth incorrect username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code 200', ()=>{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('token', pm.response.json().token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// it works when raw in body is selected\r",
											"\r",
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * charactersLength);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// pm.request.body.raw =  JSON.stringify({\r",
											"//     username: \"admin\" + Date.now(),\r",
											"//     password: \"password123\"\r",
											"// });\r",
											"\r",
											"pm.request.body.raw =  JSON.stringify({\r",
											"    username: generateRandomString(10),\r",
											"    password: \"password123\"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth incorrect password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code 200', ()=>{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('token', pm.response.json().token);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// it works when raw in body is selected\r",
											"\r",
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        const randomIndex = Math.floor(Math.random() * charactersLength);\r",
											"        result += characters.charAt(randomIndex);\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// pm.request.body.raw =  JSON.stringify({\r",
											"//     username: \"admin\" + Date.now(),\r",
											"//     password: \"password123\"\r",
											"// });\r",
											"\r",
											"pm.request.body.raw =  JSON.stringify({\r",
											"    username: \"admin\",\r",
											"    password: generateRandomString(15)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://restful-booker.herokuapp.com/auth",
									"protocol": "https",
									"host": [
										"restful-booker",
										"herokuapp",
										"com"
									],
									"path": [
										"auth"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete booing",
			"item": [
				{
					"name": "Auth Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response status code 200', ()=>{\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set('token', pm.response.json().token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Add credentials as bobject into collection variables\r",
									"pm.collectionVariables.set(\"userCredentials\", JSON.stringify({\r",
									"    username: \"admin\",\r",
									"    password: \"password123\"\r",
									"}));\r",
									"\r",
									"// it works when raw in body is selected\r",
									"pm.request.body.raw =  JSON.stringify({\r",
									"    username: \"admin\",\r",
									"    password: \"password123\"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/auth",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create booking Jonas Jonaitis 20180103",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set('bookingId', pm.response.json().bookingid)\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Jonas\",\n    \"lastname\" : \"Jonaitis\",\n    \"totalprice\": 123,\n    \"depositpaid\": true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-03\",\n        \"checkout\" : \"2019-05-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 750ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(7500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: \"cookie\",\r",
									"    value: \"token=\" + pm.collectionVariables.get(\"token\")\r",
									"});\r",
									"\r",
									"pm.request.headers.add({\r",
									"    key: \"Accept\",\r",
									"    value: \"application/json\"\r",
									"});\r",
									"\r",
									"pm.request.headers.add({\r",
									"    key: \"content-type\",\r",
									"    value: \"application/json\"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking details Jonas Jonaitis 20180103",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/booking/{{bookingId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Filter",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking?depositpaid=true&firstname=Jane&lastname=Doe",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "depositpaid",
							"value": "true"
						},
						{
							"key": "firstname",
							"value": "Jane"
						},
						{
							"key": "lastname",
							"value": "Doe"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update booking",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token=e6d1869e800af0f",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\": \"John\",\n    \"lastname\": \"Smith\",\n    \"totalprice\": 75,\n    \"depositpaid\": \"paid\",\n    \"bookingdates\": {\n        \"checkin\": \"2018-01-01\",\n        \"checkout\": \"2019-01-01\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/54",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"54"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://restful-booker.herokuapp.com",
			"type": "string"
		},
		{
			"key": "tokenCreate",
			"value": "",
			"type": "string"
		},
		{
			"key": "bookingIdCreate",
			"value": "",
			"type": "string"
		},
		{
			"key": "tokenDelete",
			"value": "",
			"type": "string"
		},
		{
			"key": "tokenPut",
			"value": "",
			"type": "string"
		},
		{
			"key": "bookingIdGet",
			"value": "",
			"type": "string"
		},
		{
			"key": "bokingIdPut",
			"value": "",
			"type": "string"
		},
		{
			"key": "bokingIdDelete",
			"value": "",
			"type": "string"
		},
		{
			"key": "bookingId",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "adminStr",
			"value": ""
		},
		{
			"key": "responseCreateBooking",
			"value": ""
		},
		{
			"key": "requestCreateBooking",
			"value": ""
		},
		{
			"key": "bookingInsertData",
			"value": ""
		},
		{
			"key": "mainPReq",
			"value": ""
		},
		{
			"key": "mainPRes",
			"value": ""
		},
		{
			"key": "usrDtls",
			"value": ""
		}
	]
}